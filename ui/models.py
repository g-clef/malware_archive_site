from django.db import models
from django.conf import settings
from django.contrib.postgres.fields import JSONField


class Archive(models.Model):
    FileName = models.CharField(max_length=10000)
    Path = models.FilePathField(path=settings.ARCHIVE_PATH)
    Source = models.CharField(max_length=100)
    Origin_url = models.URLField(blank=True, null=True)

    def __str__(self):
        return f"{self.FileName}-{self.Path}-{self.Source}"


class File(models.Model):
    Archive = models.ForeignKey(Archive, on_delete=models.DO_NOTHING, blank=True, null=True)
    FileName = models.CharField(max_length=10000)
    FileType = models.CharField(max_length=100, blank=True, null=True)
    Encoding = models.CharField(max_length=500, blank=True, null=True)

    def __str__(self):
        return f"{self.FileName}-{self.Archive}-{self.FileType}"


class Metadata(models.Model):
    File = models.OneToOneField(File, on_delete=models.DO_NOTHING)
    SHA256 = models.CharField(max_length=64)
    SHA1 = models.CharField(max_length=40)
    MD5 = models.CharField(max_length=32)
    SSDeep = models.CharField(max_length=148)

    def __str__(self):
        return f"{self.File.FileName} Metadata"


class PEHeaderInfo(models.Model):
    File = models.OneToOneField(File, on_delete=models.DO_NOTHING)
    ImpHash = models.CharField(max_length=200)
    CompileTime = models.DateTimeField()
    LIEFInfo = JSONField()

    def __str__(self):
        return f"{self.File.FileName} PEHeaderInfo"


class VTResults(models.Model):
    File = models.OneToOneField(File, on_delete=models.DO_NOTHING)
    Results = JSONField()

    def __str__(self):
        return f"{self.File.FileName} VT Results"
