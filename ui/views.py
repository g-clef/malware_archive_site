import zipfile
import os
import io
import gzip
from .models import VTResults, File, ArchiveFile
from rest_framework import viewsets, permissions
from rest_framework.decorators import action
from rest_framework.response import Response
from rest_framework.exceptions import APIException, MethodNotAllowed, ParseError
from .serializers import VTResultSerializer, FileSerializer, ArchiveFileSerializer
from PastebinDecoder import PasteDecoder
from django.http import HttpResponse
from django.conf import settings


def get_archive_file(malfile: File):
    archive = zipfile.ZipFile(os.path.join(settings.PASTEBIN_PATH, malfile.ArchiveFile.Path))
    fileHandle = archive.open(malfile.FileName)
    return fileHandle


def get_paste_file(malfile: File):
    fileHandle = get_archive_file(malfile)
    data = fileHandle.read()
    print(f"in decoding, data is {data}")
    outputfile = io.BytesIO()
    decoder = PasteDecoder()
    for encoding in malfile.Encoding.split(","):
        if encoding == "gzip":
            data = gzip.decompress(data)
        elif encoding == "base64":
            result = decoder.base64Encoded(data)
            if result is not None:
                data = result
        elif encoding == "base64Reversed":
            result = decoder.base64ReverseEncoded(data)
            if result is not None:
                data = result
        elif encoding == "hexString":
            result = decoder.hexStringEncoded(data)
            if result is not None:
                data = result
        elif encoding == "hexStringReversed":
            result = decoder.hexStringReverseEncoded(data)
            if result is not None:
                data = result
        elif encoding == "asciiString":
            result = decoder.asciiStringEncoded(data)
            if result is not None:
                data = result
        elif encoding == "asciiStringReversed":
            result = decoder.asciiStringReverseEncoded(data)
            if result is not None:
                data = result
    outputfile.write(data)
    outputfile.seek(0)
    return outputfile


class VTResultViewSet(viewsets.ModelViewSet):
    queryset = VTResults.objects.all()
    serializer_class = VTResultSerializer
    permission_classes = [permissions.IsAuthenticated, ]


class ArchivedFileViewSet(viewsets.ModelViewSet):
    queryset = ArchiveFile.objects.all()
    serializer_class = ArchiveFileSerializer
    permission_classes = [permissions.IsAuthenticated, ]

    @staticmethod
    def _get_arguments(request):
        if request.method == "GET":
            source = request.GET
        elif request.method == "POST":
            source = request.POST
        else:
            raise MethodNotAllowed("WTF are you doing?")
        file_name = source.get("FileName", None)
        path = source.get("Path", None)
        return file_name, path

    @action(detail=False, methods=['get', 'post'], permission_classes=[permissions.IsAuthenticated,])
    def exists(self, request):
        file_name, path = self._get_arguments(request)
        if not file_name and not path:
            raise ParseError("You have to supply a Path or FileName")
        search = ArchiveFile.objects
        if file_name:
            search = search.filter(FileName=file_name)
        if path:
            search = search.filter(Path=path)
        file_exists = search.exists()
        return Response({"status": file_exists})

    @action(detail=False, methods=['get', 'post'], permission_classes=[permissions.IsAuthenticated,])
    def search(self, request):
        file_name, path = self._get_arguments(request)
        search = ArchiveFile.objects
        if file_name:
            search = search.filter(FileName=file_name)
        if path:
            search = search.filter(Path=path)
        archive = search.first()
        return Response({"status": "found", "id": archive.id})


class FileViewSet(viewsets.ModelViewSet):
    queryset = File.objects.all()
    serializer_class = FileSerializer
    permission_classes = [permissions.IsAuthenticated,]

    @staticmethod
    def _get_hash_arguments(request):
        if request.method == "GET":
            source = request.GET
        elif request.method == "POST":
            source = request.POST
        else:
            raise MethodNotAllowed("WTF")
        md5 = source.get("md5", None)
        sha1 = source.get("sha1", None)
        sha256 = source.get("sha256", None)
        return md5, sha1, sha256

    @action(detail=False, methods=['get', 'post'], permission_classes=[permissions.IsAuthenticated,])
    def search_by_hash(self, request):
        md5, sha1, sha256 = self._get_hash_arguments(request)
        if sha256:
            malfile = File.objects.filter(SHA256=sha256).exists()
        elif sha1:
            malfile = File.objects.filter(SHA1=sha1).exists()
        elif md5:
            malfile = File.objects.filter(MD5=md5).exists()
        else:
            raise ParseError({"status": "Missing hash value, must include md5, sha1, or sha256"})
        return Response({"found": malfile})

    @action(detail=False, methods=['get', 'post'], permission_classes=[permissions.IsAuthenticated])
    def get_file_by_hash(self, request):
        md5, sha1, sha256 = self._get_hash_arguments(request)
        if sha256:
            malfile = File.objects.filter(SHA256=sha256).first()
        elif sha1:
            malfile = File.objects.filter(SHA1=sha1).first()
        elif md5:
            malfile = File.objects.filter(MD5=md5).first()
        else:
            raise ParseError({"status": "Missing hash value, must include md5, sha1, or sha256"})
        if not malfile:
            return Response({"status": "File Not found"}, status=404)
        print("getting file")
        if malfile.ArchiveFile:
            if malfile.Source == "pastebin":
                fileHandle = get_paste_file(malfile)
            else:
                fileHandle = get_archive_file(malfile)
            print(f"have filehandle: {fileHandle}")
            data = fileHandle.read()
            print(f"data is {data}")
        else:
            data = []
        return HttpResponse(data, content_type=malfile.FileType)


def index(_):
    return HttpResponse("hello")
