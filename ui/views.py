from .models import Archive, VTResults, File, Metadata, PEHeaderInfo
from rest_framework import viewsets, permissions
from rest_framework.decorators import action
from rest_framework.response import Response
from rest_framework.exceptions import MethodNotAllowed, ParseError
from .serializers import VTResultSerializer, FileSerializer, ArchiveSerializer, PEHeaderInfoSerializer, MetadataSerializer
from django.http import HttpResponse


class FileViewSet(viewsets.ModelViewSet):
    queryset = File.objects.all()
    serializer_class = FileSerializer
    permission_classes = [permissions.IsAuthenticated,]


class VTResultViewSet(viewsets.ModelViewSet):
    queryset = VTResults.objects.all()
    serializer_class = VTResultSerializer
    permission_classes = [permissions.IsAuthenticated, ]


class MetadataViewSet(viewsets.ModelViewSet):
    queryset = Metadata.objects.all()
    serializer_class = MetadataSerializer
    permission_classes = [permissions.IsAuthenticated, ]


class PEHeaderInfoViewSet(viewsets.ModelViewSet):
    queryset = PEHeaderInfo.objects.all()
    serializer_class = PEHeaderInfoSerializer
    permission_classes = [permissions.IsAuthenticated,]


class ArchivedViewSet(viewsets.ModelViewSet):
    queryset = Archive.objects.all()
    serializer_class = ArchiveSerializer
    permission_classes = [permissions.IsAuthenticated, ]

    @staticmethod
    def _get_arguments(request):
        if request.method == "GET":
            source = request.GET
        elif request.method == "POST":
            source = request.POST
        else:
            raise MethodNotAllowed("WTF are you doing?")
        file_name = source.get("FileName", None)
        path = source.get("Path", None)
        return file_name, path

    @action(detail=False, methods=['get', 'post'], permission_classes=[permissions.IsAuthenticated,])
    def exists(self, request):
        file_name, path = self._get_arguments(request)
        if not file_name and not path:
            raise ParseError("You have to supply a Path or FileName")
        search = Archive.objects
        if file_name:
            search = search.filter(FileName=file_name)
        if path:
            search = search.filter(Path=path)
        file_exists = search.exists()
        return Response({"status": file_exists})

    @action(detail=False, methods=['get', 'post'], permission_classes=[permissions.IsAuthenticated,])
    def search(self, request):
        file_name, path = self._get_arguments(request)
        search = Archive.objects
        if file_name:
            search = search.filter(FileName=file_name)
        if path:
            search = search.filter(Path=path)
        archive = search.first()
        return Response({"status": "found", "id": archive.id})


def index(_):
    return HttpResponse("hello")
